/**
 *  Copyright 2014 Ryszard Wi≈õniewski <brut.alll@gmail.com>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

dependencies {
    implementation depends.commons_cli
    implementation project(':brut.apktool:apktool-lib')
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath(depends.proguard_gradle) {
            exclude group: 'com.android.tools.build'
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class' : 'brut.apktool.Main'
    }
}

task cleanOutputDirectory(type: Delete) {
    delete fileTree(dir: jar.getDestinationDirectory().getAsFile(), exclude: "apktool-cli-all.jar")
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: shadowJar) {
    injars shadowJar.getArchiveFile()

    // Java 9 and prior uses merged package for runtime, later uses split jmod files.
    if (JavaVersion.current() <= JavaVersion.VERSION_1_8) {
        libraryjars "${System.properties['java.home']}/lib/jce.jar"
        libraryjars "${System.properties['java.home']}/lib/rt.jar"
    } else {
        libraryjars "${System.properties['java.home']}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.properties['java.home']}/jmods/java.compiler.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.properties['java.home']}/jmods/java.logging.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.properties['java.home']}/jmods/java.xml.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.properties['java.home']}/jmods/java.desktop.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.properties['java.home']}/jmods/java.sql.jmod", jarfilter: '!**.jar', filter: '!module-info.class'

        libraryjars "${System.properties['java.home']}/jmods/jdk.unsupported.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }

    dontobfuscate
    dontoptimize

    keep 'public class brut.apktool.Main { public static void main(java.lang.String[]); }'
    keepclassmembers 'enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'
    dontwarn 'com.google.common.base.**'
    dontwarn 'com.google.common.collect.**'
    dontwarn 'com.google.common.util.**'
    dontwarn 'javax.xml.xpath.**'
    dontnote '**'

    def outPath = jar.getDestinationDirectory().getAsFile().get().toString()
    def extension = jar.archiveExtension.get().toString()
    def outFile = outPath + '/' + "apktool" + '-' + project.apktool_version + '-small' + '.' + extension
    outjars outFile
}

proguard.dependsOn cleanOutputDirectory
tasks.getByPath(':release').dependsOn(proguard)

version = project.apktool_version.replace('-SNAPSHOT', '')
version = version.substring(0, version.lastIndexOf('-'))

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

shadowJar {
    // Set classifier to "null", to make the shadow JAR the main published artifact.
    archiveClassifier.set(null)
}

artifacts {
    shadowJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
}

// Upload to bintray with:
//   ../../gradlew clean build bintrayUpload --info
// Needs properties: bintray_user, bintray_key.
if (project.hasProperty('bintray_user') && project.hasProperty('bintray_key')) {
    bintray {
        user = bintray_user
        key = bintray_key
        publications = ['mavenJava']
        configurations = ['archives']
        pkg {
            repo = 'plast-lab'
            name = 'apktool'
            desc = 'The Apktool reverse engineering tool.'
            licenses = ['Apache 2.0']
            labels = ['java']
            vcsUrl = 'https://github.com/iBotPeaches/Apktool'
            version {
                name = project.version
                released = new Date()
                vcsTag = project.version
            }
        }
    }
}
